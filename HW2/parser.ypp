%{

#include "output.hpp"
extern int yylineno; 
void yyerror(char const *s);
 int yylex();


%}
%token INT BYTE B BOOL CONST TRUE FALSE IF RETURN WHILE BREAK CONTINUE SC COMMA COMMENT ID NUM STRING 
%right ASSIGN 
%left OR
%left AND
%left EQ_NEQ
%left RELOP
%left ADDITION_SUBSTRACTION
%left MULTIPLICATION_DIVISION
%right NOT
%left LPAREN RPAREN LBRACE RBRACE 
%right  ELSE
%%

Program:
    Statements {output::printProductionRule(1);}
    ;

Statements:
    Statement {output::printProductionRule(2);}
    | Statements Statement  {output::printProductionRule(3);}
    ;

Statement:
    LBRACE Statements RBRACE {output::printProductionRule(4);}
    | Type ID SC {output::printProductionRule(5);}
    | Type ID ASSIGN Exp SC {output::printProductionRule(6);}
    | ID ASSIGN Exp SC {output::printProductionRule(7);}
    | Call SC {output::printProductionRule(8);}
    | RETURN SC {output::printProductionRule(9);}
    | IF LPAREN Exp RPAREN Statement {output::printProductionRule(10);}
    | IF LPAREN Exp RPAREN Statement ELSE Statement {output::printProductionRule(11);}
    | WHILE LPAREN Exp RPAREN Statement {output::printProductionRule(12);}
    | BREAK SC {output::printProductionRule(13);}
    | CONTINUE SC {output::printProductionRule(14);}
    ;

Call:
    ID LPAREN Exp RPAREN {output::printProductionRule(15);}
    ;

Type:
    INT     {output::printProductionRule(16);}
    | BYTE  {output::printProductionRule(17);}
    | BOOL {output::printProductionRule(18);}
    ;

Exp:
    LPAREN Exp RPAREN {output::printProductionRule(19);}
    
    | Exp ADDITION_SUBSTRACTION Exp {output::printProductionRule(20);}
    |  Exp MULTIPLICATION_DIVISION Exp {output::printProductionRule(20);}
    | ID {output::printProductionRule(21);}
    | Call {output::printProductionRule(22);}
    | NUM {output::printProductionRule(23);}
    | NUM B {output::printProductionRule(24);}
    | STRING {output::printProductionRule(25);}
    | TRUE {output::printProductionRule(26);}
    | FALSE     {output::printProductionRule(27);}
    | NOT Exp  {output::printProductionRule(28);}
    | Exp AND Exp  {output::printProductionRule(29);}
    | Exp OR Exp  {output::printProductionRule(30);}
    | Exp EQ_NEQ Exp  {output::printProductionRule(31);}
    | Exp RELOP Exp  {output::printProductionRule(31);}
    | LPAREN Type RPAREN Exp  {output::printProductionRule(32);}
    ;

%%

// You can include C++ code here that defines any additional functions or data structures used above
int main()
{
    return yyparse();
} 

void yyerror(char const * s)
{
    output::errorSyn(yylineno);
} 




